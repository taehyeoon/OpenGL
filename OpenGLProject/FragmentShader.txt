#version 400 core

in vec2 texCoord;

out vec4 color;

uniform mat3 u_kernel;
uniform float u_kernel_sum;
uniform bool u_isNegative;

uniform sampler2D texture1;

void main()
{
    vec2 delta = 1.0 / textureSize(texture1, 0);
    
    vec4 coord_l_u = texture(texture1, texCoord + (delta * vec2(-1.0,  1.0))) * u_kernel[0][0]; // left, up
    vec4 coord_c_u = texture(texture1, texCoord + (delta * vec2( 0.0,  1.0))) * u_kernel[1][0]; // center, up
    vec4 coord_r_u = texture(texture1, texCoord + (delta * vec2( 1.0,  1.0))) * u_kernel[2][0]; // right, up
    
    vec4 coord_l_c = texture(texture1, texCoord + (delta * vec2(-1.0,  0.0))) * u_kernel[0][1]; // left, center
    vec4 coord_c_c = texture(texture1, texCoord + (delta * vec2( 0.0,  0.0))) * u_kernel[1][1]; // center, center
    vec4 coord_r_c = texture(texture1, texCoord + (delta * vec2( 1.0,  0.0))) * u_kernel[2][1]; // right, center
    
    vec4 coord_l_d = texture(texture1, texCoord + (delta * vec2(-1.0, -1.0))) * u_kernel[0][2]; // left, down
    vec4 coord_c_d = texture(texture1, texCoord + (delta * vec2( 0.0, -1.0))) * u_kernel[1][2]; // center, down
    vec4 coord_r_d = texture(texture1, texCoord + (delta * vec2( 1.0, -1.0))) * u_kernel[2][2]; // right, down
    
    color = (coord_l_u + coord_c_u + coord_r_u +
             coord_l_c + coord_c_c + coord_r_c +
             coord_l_d + coord_c_d + coord_r_d) / u_kernel_sum;

    if(u_isNegative)
        color = vec4(1.0) - color;
        
    color.a = 1.0;
}
